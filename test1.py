# # from const import G, Rsun, Msun, yearsc
# import numpy as np
# import random
# # from zcnst import zcnsts_set
# # from zfuncs import rgbf, lbgbf, lHeIf
# import matplotlib.pyplot as plt
# # import concurrent.futures
# # from numba.experimental import jitclass
# # from numba import types
# # from numba import float64, njit
# import time
# # from numba import float64
# import matplotlib.pyplot as plt
# import pandas as pd
# from scipy import optimize as op
# # from matplotlib.colors import LogNorm
# # from astropy.coordinates import SkyCoord
#
#
# data = pd.read_csv("./zpars.txt", delimiter=' ')
# x = data['z'].values
# # x = data['z'].values
# y1 = data['z9'].values
# y2 = data['z10'].values
#
# plt.scatter(x, y1)
# plt.scatter(x, y2)
# # plt.xlabel('x-axis')
# # plt.ylabel('y-axis')
# # plt.title('Scatter Plot')
# # def f_1(x, A, B):
# #     return A * x + B
# # A, B = op.curve_fit(f_1, x, y1)[0]
# # print("y="+str(A)+"x+"+str(B))
# z = np.linspace(0.0001,0.03,2000)
# # y1_fit = f_1(x, A, B)
# # plt.plot(x, y1_fit)
#
# y1_fit = -0.037 * np.log10(z) + 0.145
# y2_fit = -0.013 * np.log10(z) ** 2 - 0.083 * np.log10(z) + 0.214
# plt.plot(z, y1_fit)
# plt.plot(z, y2_fit)
#
# plt.show()
# # exit(0)
#
#
#
#
#
# # jitclass_enabled = False
# #
# # def conditional_jitclass(spec):
# #     def decorator(cls):
# #         if jitclass_enabled:
# #             return jitclass(spec)(cls)
# #         else:
# #             return cls
# #     return decorator
# #
# # spec = [
# #     ('x', float64[:, :]),
# #     ('y', float64),
# # ]
# # @conditional_jitclass(spec)
# # class MyClass:
# #     def __init__(self, x):
# #         self.x = x
# #         self.y = 0
# #
# #     def go_fast(self):  # Function is compiled and runs in machine code
# #         trace = 0.0
# #         for i in range(self.x.shape[0]):
# #             trace += np.tanh(self.x[i, i])
# #
# #
# # x = np.random.rand(10000, 10000)
# # my_class = MyClass(x=x)
# #
# # # 测试不加njit修饰器的compute_sum方法的运算速度
# # start = time.time()
# # result = my_class.go_fast()
# # end = time.time()
# # print("compute_sum elapsed time: ", end - start)
# #
# # start = time.time()
# # result1 = my_class.go_fast()
# # end = time.time()
# # print("compute_sum elapsed time: ", end - start)
#
#
#
#
# # sigma = 1.0  # 麦克斯韦分布的标准差
# # n = 1000000
# # z1 = np.random.randn(n)  # 生成第一个标准正态分布随机数
# # z2 = np.random.randn(n)  # 生成第二个标准正态分布随机数
# # x = sigma * np.sqrt(z1**2 + z2**2)  # 计算麦克斯韦分布的随机值
# #
# # u1 = np.random.rand(n)
# # s = sigma * np.sqrt(-2.0 * np.log(1.0 - u1))
# #
# # plt.hist(x, bins=100, color='blue', label='x', alpha=0.5, histtype='step')
# # plt.hist(s, bins=100, color='red', label='s', alpha=0.5, histtype='step')
# # plt.legend()
# # plt.show()
#
# # rng_z = np.random.default_rng(4).integers(low=0, high=12, size=20)
# # z_value = np.array([0.0002, 0.0005, 0.001, 0.002, 0.003, 0.005, 0.008, 0.01, 0.0125, 0.015, 0.0175, 0.02])
# # z = z_value[rng_z[3]]
# # print(z)
#
# # num_evolve = int(12e6)
# # a = num_evolve // 100
# # print(a)
# # mu = 5  # 均值
# # sigma = 2  # 标准差
# # seed = 1  # 设置随机数生成器的种子
# #
# # # 生成使用 random.gauss 方法的随机数序列
# # random.seed(seed)
# # random_numbers_gauss = [random.gauss(mu, sigma) for _ in range(500000)]
# #
# # # 生成使用随机数生成器的随机数序列
# # rng = np.random.default_rng(seed)
# # random_numbers_rng = rng.normal(mu, sigma, 500000)
# #
# # # 绘制直方图
# # plt.hist(random_numbers_gauss, bins=30, alpha=0.5, label='random.gauss')
# # plt.hist(random_numbers_rng, bins=30, alpha=0.5, label='Random number generator')
# # # plt.legend(loc='upper right')
# # plt.xlabel('Value')
# # plt.ylabel('Frequency')
# # plt.title('Comparison of Random Number Generation')
# # plt.show()
#
#
#
#
#
# #
# #
# # if __name__ == '__main__':
# #     num_processes = 4
# #     num_executions = 10000
# #
# #     with concurrent.futures.ProcessPoolExecutor(max_workers=num_processes) as executor:
# #         seeds = range(1, num_executions + 1)
# #
# #         # 使用map方法执行多次popbin函数，并收集结果
# #         results = list(executor.map(popbin, seeds))
# #
# #     # 绘制直方图
# #     plt.hist(results, bins=10)
# #     plt.xlabel('Random Number')
# #     plt.ylabel('Frequency')
# #     plt.title('Distribution of Random Numbers')
# #     plt.show()
#
# # rng = np.random.default_rng(1)
# # data = rng.random(500000)
# # plt.hist(data)
# # plt.show()
#
# # num = 10
# #
# # data = np.zeros(shape=(10, ))
# # print()
# #
# #
# # def add(i):
# #     data[i] = RNG1.random()
# #
# #
# # if __name__ == '__main__':
# #
# #     # with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:
# #     #     results = [executor.submit(add) for _ in range(int(num))]
# #     for i in range(num):
# #         add(i)
# #
# #     print(data)
#
# # zcnsts.z = 0.03
# # zcnsts_set(zcnsts)
# # print(zcnsts.zpars[3])
# # # print(zcnsts.gbp)
# # m = np.logspace(-1, 1.5, 100)
# # # lum = np.logspace(0, 4, num=100)
# # lhei = m.copy()
# # lbgb = lbgbf(m, zcnsts)
# # for i in range(len(m)):
# #     lhei[i] = lHeIf(m[i], zcnsts.zpars[2], zcnsts)
# # plt.plot(m, lbgb, c='r')
# # plt.plot(m, lhei, c='b')
# # plt.xscale('log')
# # plt.yscale('log')
# # plt.show()
#
#
# # sep_to_period = 2 * np.pi * (Rsun**3 / G / Msun) ** 0.5 / yearsc
# # period_to_sep = (G * Msun * (yearsc/2/np.pi)**2)**(1/3) / Rsun
# #
# # M = 10
# # # tb = 2
# # # sep = period_to_sep * (tb**2 * M) ** (1 / 3)
# # sep = 735.379
# # # tb = sep_to_period * (sep ** 3 / M) ** 0.5
# # # print(sep)
# #
# # print(sep_to_period)
# # print(period_to_sep)

a = """
[ 0.00000000e+00  3.97041700e-01  8.52762600e+00  2.55460000e-04
  5.43288900e+00  5.56357900e+00  7.88660600e-01  5.86685000e-03
  1.71535900e+00  6.59778800e+00  1.00885500e+01  1.01249500e+00
  7.49016600e-02  1.07742200e-02  3.08223400e+00  1.78477800e+01
  2.25820000e-04  1.59389000e+03  2.70670800e+03  1.46614300e+02
  4.14196000e-02  3.42634900e-01  1.94981400e+01  4.90383000e+00
  5.21215400e-02  1.31217900e+00  8.07397200e-01  3.98061334e+03
  4.02760329e+03  7.85957300e+02  3.85891100e+03  2.88872000e+02
  7.19658000e+00  2.32140000e-01  1.16365900e-02  1.04802000e-02
  1.55559000e+00  1.00000000e+00  1.10000000e+00  1.45000000e-01
  2.40000000e-01  3.30000000e-01  1.96041526e-01  3.85570700e-01
  3.57906400e-01  9.58758700e-01  1.40000000e+00  1.91030200e-01
  3.93105600e-01  3.26777600e-01  5.99021200e-01  1.40000000e+00
  5.80201926e+00  3.88913233e+01  2.65209100e+01  1.47210300e+00
  3.07104800e+00 -8.67207300e-02  2.61789000e+00  1.07556700e-02
  1.47624600e+00  5.50253500e+00  1.39990963e+00  2.41531558e+00
  2.67494840e+00  4.90754600e-01  4.53707000e+00  1.79622000e+00
  2.25621600e+00  1.56423100e-03  8.00000000e-01  8.00000000e-01
  5.21015700e+00  8.43000000e-02  7.36000000e-02  6.39296545e-02
  6.39296545e-02  1.07148900e+00  7.10849200e-01  3.47851400e+00
  3.96933100e-03  9.50000000e-01  1.60000000e+00  1.19233400e-02
 -1.66886800e-01  7.61549500e-01  2.00000000e+00  1.50000000e+00
  1.00000000e+00  5.85542000e-02  7.33012200e-01  1.17276800e+00
  3.98262200e-01  3.57103800e+00  1.25000000e+00  6.30000000e-02
  1.20000000e+00  1.00000000e+01  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  4.45811537e+04  3.22057805e+04 -2.27666288e+03
  9.91252834e-01  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
[ 0.00000000e+00  9.51103300e+01  3.11345800e+01  1.00796342e+01
  3.91086200e+01  4.59747900e+00  6.68251800e+00  4.63734500e+00
  9.30199200e+00  1.62606200e+02  3.33683300e-01  1.50000000e+01
  4.25473988e+04  9.26832500e+02  4.00773275e+02  2.47440100e+00
  1.48395286e+02  3.82721503e-01  3.97000000e-01  7.55037259e-01
  9.96028300e-01  2.56106200e-01  1.15733800e+00  4.02276500e-01
  9.80079527e-01  1.12512400e+00  3.34948900e-01  1.46779400e+00
  4.65851200e-01  1.11086600e+00 -1.58433300e-01  8.26478226e-01
  8.92760248e-01  9.20924843e-05  5.40221600e+00  4.36245584e-04
  5.21651600e+00  6.84058916e-02  2.75163100e+03 -3.82083100e-02
  1.50000000e+01  1.01131537e-12  1.14862234e+04  7.34879300e+02
  8.49953634e+01  4.87003137e+01  4.83761352e-01  3.23642698e+02
  3.62911800e+00  1.76250404e+04  1.74750000e-01  1.24387334e+03
  4.61575099e+00  3.51850600e+00  1.31495500e+02  1.82397300e+01
  1.50000000e+01 -1.00483258e-13  5.40312256e+00  1.07911300e-01
  6.82910117e+01  1.99737800e+00  1.80484433e+00  4.80542800e-01
  6.82701000e-01  7.22955448e-01  7.15716141e-08  5.07252500e+00
  5.13974000e+00  5.49604500e+01  1.83269400e+00  1.50000000e+01
  1.21110400e+02  1.64790300e+00  3.98365127e+01  2.06398300e+00
  2.21408800e+02  2.00316000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
  """

b = """
[ 0.00000000e+00  3.97041700e-01  8.52762600e+00  2.55460000e-04
  5.43288900e+00  5.56357900e+00  7.88660600e-01  5.86685000e-03
  1.71535900e+00  6.59778800e+00  1.00885500e+01  1.01249500e+00
  7.49016600e-02  1.07742200e-02  3.08223400e+00  1.78477800e+01
  2.25820000e-04  1.59389000e+03  2.70670800e+03  1.46614300e+02
  4.14196000e-02  3.42634900e-01  1.94981400e+01  4.90383000e+00
  5.21215400e-02  1.31217900e+00  8.07397200e-01  3.98061334e+03
#   4.02760329e+03  7.85957300e+02  3.85891100e+03  2.88872000e+02
#   7.19658000e+00  2.32140000e-01  1.16365900e-02  1.04802000e-02
#   1.55559000e+00  1.00000000e+00  1.10000000e+00  1.45000000e-01
#   2.40000000e-01  3.30000000e-01  1.96041526e-01  3.85570700e-01
#   3.57906400e-01  9.58758700e-01  1.40000000e+00  1.91030200e-01
#   3.93105600e-01  3.26777600e-01  5.99021200e-01  1.40000000e+00
#   5.80201926e+00  3.88913233e+01  2.65209100e+01  1.47210300e+00
#   3.07104800e+00 -8.67207300e-02  2.61789000e+00  1.07556700e-02
#   1.47624600e+00  5.50253500e+00  1.39990963e+00  2.37353829e+00
#   2.67494840e+00  4.90754600e-01  4.53707000e+00  1.79622000e+00
#   2.25621600e+00  1.56423100e-03  8.00000000e-01  8.00000000e-01
#   5.21015700e+00  8.43000000e-02  7.36000000e-02  6.39296545e-02
#   6.39296545e-02  1.07148900e+00  7.10849200e-01  3.47851400e+00
#   3.96933100e-03  9.50000000e-01  1.60000000e+00  1.19233400e-02
#  -1.66886800e-01  7.61549500e-01  2.00000000e+00  1.50000000e+00
#   1.00000000e+00  5.85542000e-02  7.33012200e-01  1.17276800e+00
#   3.98262200e-01  3.57103800e+00  1.25000000e+00  6.30000000e-02
#   1.20000000e+00  1.00000000e+01  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  4.45811537e+04  3.22057805e+04 -2.27666288e+03
#   9.91252834e-01  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
# [ 0.00000000e+00  9.51103300e+01  3.11345800e+01  1.00796342e+01
#   3.91086200e+01  4.59747900e+00  6.68251800e+00  4.63734500e+00
#   9.30199200e+00  1.62606200e+02  3.33683300e-01  1.50000000e+01
#   4.25473988e+04  9.26832500e+02  4.00773275e+02  2.47440100e+00
#   1.48395286e+02  3.82721503e-01  3.97000000e-01  7.55037259e-01
#   9.96028300e-01  2.56106200e-01  1.15733800e+00  4.02276500e-01
#   9.80079527e-01  1.12512400e+00  3.34948900e-01  1.46779400e+00
#   4.65851200e-01  1.11086600e+00 -1.58433300e-01  8.26478226e-01
#   8.92760248e-01  9.20924843e-05  5.40221600e+00  4.36245584e-04
#   5.21651600e+00  6.84058916e-02  2.75163100e+03 -3.82083100e-02
#   1.50000000e+01  1.01131537e-12  1.14862234e+04  7.34879300e+02
#   8.49953634e+01  4.87003137e+01  4.83761352e-01  3.23642698e+02
#   3.62911800e+00  1.76250404e+04  1.74750000e-01  1.24387334e+03
#   4.61575099e+00  3.51850600e+00  1.31495500e+02  1.82397300e+01
#   1.50000000e+01 -1.00483258e-13  5.40312256e+00  1.07911300e-01
#   6.82910117e+01  1.99737800e+00  1.80484433e+00  4.80542800e-01
#   6.82701000e-01  7.22955448e-01  7.15716141e-08  5.07252500e+00
#   5.13974000e+00  5.49604500e+01  1.83269400e+00  1.50000000e+01
#   1.21110400e+02  1.64790300e+00  3.98365127e+01  2.06398300e+00
#   2.21408800e+02  2.00316000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
  """
print(a.strip() == b.strip())
